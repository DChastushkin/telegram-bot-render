// bot/handlers/access.js
import { Markup } from "telegraf";
import { newUserMenu, memberMenu, showMenuByStatus } from "../ui.js";

export function registerAccessHandlers(bot, env) {
  const { CHANNEL_ID, ADMIN_CHAT_ID } = env;

  // /id ‚Äî —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —É–∑–Ω–∞—Ç—å chat.id
  bot.command("id", async (ctx) => ctx.reply(`chat.id = ${ctx.chat.id}`));

  // /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å ¬´—É–º–Ω–æ–µ¬ª –º–µ–Ω—é
  bot.start(async (ctx) => {
    await ctx.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞.");
    await showMenuByStatus(ctx, CHANNEL_ID);
  });

  // ¬´–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª
  bot.hears("üîì –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª", async (ctx) => {
    try {
      const m = await ctx.telegram.getChatMember(CHANNEL_ID, ctx.from.id).catch(() => null);

      if (m?.status === "kicked") {
        await ctx.reply("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã –≤–∞—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏.");
        await ctx.telegram.sendMessage(
          ADMIN_CHAT_ID,
          `üõë –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${ctx.from.username || ctx.from.id} (id: ${ctx.from.id})`,
          { reply_markup: { inline_keyboard: [[
            { text: "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data: JSON.stringify({ t: "unban", uid: ctx.from.id }) }
          ]] } }
        );
        return;
      }

      if (["member","administrator","creator"].includes(m?.status)) {
        await ctx.reply("‚úÖ –í—ã —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫. –ú–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–µ–º—ã.", memberMenu());
        return;
      }

      const link = await ctx.telegram.createChatInviteLink(CHANNEL_ID, {
        creates_join_request: true,
        name: `req_${ctx.from.id}_${Date.now()}`
      });

      await ctx.reply(
        "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª:",
        Markup.inlineKeyboard([[Markup.button.url("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É ‚Üí", link.invite_link)]])
      );

      await ctx.telegram.sendMessage(
        ADMIN_CHAT_ID,
        `üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –æ—Ç @${ctx.from.username || ctx.from.id} (id: ${ctx.from.id}).`
      );
    } catch (e) {
      console.error("createChatInviteLink error:", e);
      await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç ‚Äî –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞.");
    }
  });

  // –°–æ–±—ã—Ç–∏–µ –∑–∞—è–≤–æ–∫ (–ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç –∫–∞–Ω–∞–ª–∞)
  bot.on("chat_join_request", async (ctx) => {
    const req = ctx.update.chat_join_request;
    const u = req.from;
    const approve = JSON.stringify({ t: "approve", cid: req.chat.id, uid: u.id });
    const decline = JSON.stringify({ t: "decline", cid: req.chat.id, uid: u.id });

    await ctx.telegram.sendMessage(
      ADMIN_CHAT_ID,
      `üì© –ó–∞—è–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª –æ—Ç @${u.username || u.id} (id: ${u.id})`,
      { reply_markup: { inline_keyboard: [[
        { text: "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data: approve },
        { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: decline }
      ]] } }
    );
  });
}
