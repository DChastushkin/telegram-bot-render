// bot/handlers/moderation.js
import { newUserMenu, memberMenu } from "../ui.js";
import { isMember, handleRejectionReason } from "../utils.js";
import {
  awaitingTopic, pendingRejections, pendingRejectionsByAdmin, pendingSubmissions
} from "../state.js";

export function registerModerationHandlers(bot, env) {
  const { CHANNEL_ID, ADMIN_CHAT_ID } = env;

  // ¬´–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É¬ª (—Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
  bot.hears("üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É/–≤–æ–ø—Ä–æ—Å", async (ctx) => {
    if (!(await isMember(ctx, CHANNEL_ID))) {
      await ctx.reply("‚ùå –í—ã –µ—â—ë –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ—Å—Ç—É–ø.", newUserMenu());
      return;
    }
    awaitingTopic.add(ctx.from.id);
    await ctx.reply("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ç–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã).");
  });

  bot.command("cancel", async (ctx) => {
    awaitingTopic.delete(ctx.from.id);
    await ctx.reply("–û—Ç–º–µ–Ω–µ–Ω–æ.", await isMember(ctx, CHANNEL_ID) ? memberMenu() : newUserMenu());
  });

  // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on("message", async (ctx, next) => {
    try {
      // 1) –û—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π (–≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ)
      if (String(ctx.chat?.id) === String(ADMIN_CHAT_ID)) {
        const replyTo = ctx.message?.reply_to_message;

        // 1a) –†–µ–ø–ª–∞–π –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫—É/–∫–∞—Ä—Ç–æ—á–∫—É/–∫–æ–ø–∏—é
        if (replyTo) {
          const key = replyTo.message_id;
          const entry = pendingRejections.get(key);
          if (entry) { await handleRejectionReason(ctx, entry, { ADMIN_CHAT_ID }); return; }
        }
        // 1b) ¬´–ü–ª–∞–Ω –ë¬ª: —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ä–µ–ø–ª–∞—è
        const planB = pendingRejectionsByAdmin.get(ctx.from.id);
        if (planB) { await handleRejectionReason(ctx, planB, { ADMIN_CHAT_ID }); return; }
      }

      // 2) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–º—É (–ª—é–±–æ–π —Ç–∏–ø), –µ—Å–ª–∏ –∂–¥–∞–ª–∏
      if (awaitingTopic.has(ctx.from.id)) {
        if (!(await isMember(ctx, CHANNEL_ID))) {
          awaitingTopic.delete(ctx.from.id);
          await ctx.reply("‚ùå –í—ã –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ—Å—Ç—É–ø.", newUserMenu());
          return;
        }

        awaitingTopic.delete(ctx.from.id);

        const srcChatId = ctx.chat.id;
        const srcMsgId  = ctx.message.message_id;

        // –∏–Ω—Ñ–æ –æ–± –∞–≤—Ç–æ—Ä–µ
        const name = [ctx.from.first_name, ctx.from.last_name].filter(Boolean).join(" ") || "‚Äî";
        await ctx.telegram.sendMessage(ADMIN_CHAT_ID,
          `üë§ –û—Ç: @${ctx.from.username || "‚Äî"}\nID: ${ctx.from.id}\n–ò–º—è: ${name}`
        );

        // –∫–æ–ø–∏—è –∏—Å—Ö–æ–¥–Ω–∏–∫–∞ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
        const copied = await ctx.telegram.copyMessage(ADMIN_CHAT_ID, srcChatId, srcMsgId);

        // –∫–∞—Ä—Ç–æ—á–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        const cbData = (t) => JSON.stringify({ t, uid: ctx.from.id });
        const control = await ctx.telegram.sendMessage(
          ADMIN_CHAT_ID,
          "üìù –ù–æ–≤–∞—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ç–µ–º–∞ (—Å–º. —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ).",
          { reply_markup: { inline_keyboard: [[
            { text: "üì£ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data: cbData("publish") },
            { text: "üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å",   callback_data: cbData("reject")  }
          ]] } }
        );

        pendingSubmissions.set(control.message_id, {
          srcChatId, srcMsgId, authorId: ctx.from.id, adminCopyMsgId: copied.message_id
        });

        await ctx.reply("–¢–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.", memberMenu());
        return;
      }

      return next();
    } catch (e) {
      console.error("message handler error:", e);
      return next();
    }
  });
}
