// bot/handlers/moderation.js
import { newUserMenu, memberMenu, composeKeyboard, choiceKeyboard } from "../ui.js";
import { isMember, handleRejectionReason } from "../utils.js";
import { submitDraftToModeration } from "../submit.js";
import {
  awaitingTopic, pendingDrafts, pendingRejections, pendingRejectionsByAdmin, awaitingIntent
} from "../state.js";

function detectContentMeta(msg) {
  if ("text" in msg)
    return { kind: "text", supportsCaption: false, text: msg.text || "", entities: msg.entities || [] };
  if (msg.photo)
    return { kind: "photo", supportsCaption: true, text: msg.caption || "", entities: msg.caption_entities || [] };
  if (msg.video)
    return { kind: "video", supportsCaption: true, text: msg.caption || "", entities: msg.caption_entities || [] };
  if (msg.animation)
    return { kind: "animation", supportsCaption: true, text: msg.caption || "", entities: msg.caption_entities || [] };
  if (msg.document)
    return { kind: "document", supportsCaption: true, text: msg.caption || "", entities: msg.caption_entities || [] };
  if (msg.audio)
    return { kind: "audio", supportsCaption: true, text: msg.caption || "", entities: msg.caption_entities || [] };
  if (msg.voice)
    return { kind: "voice", supportsCaption: true, text: msg.caption || "", entities: msg.caption_entities || [] };
  if (msg.video_note)
    return { kind: "video_note", supportsCaption: false, text: "", entities: [] };
  if (msg.sticker)
    return { kind: "sticker", supportsCaption: false, text: "", entities: [] };
  return { kind: "other", supportsCaption: false, text: "", entities: [] };
}

export function registerModerationHandlers(bot, env) {
  const { CHANNEL_ID, ADMIN_CHAT_ID } = env;

  bot.hears("üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É/–≤–æ–ø—Ä–æ—Å", async (ctx) => {
    if (!(await isMember(ctx, CHANNEL_ID))) {
      await ctx.reply("‚ùå –í—ã –µ—â—ë –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ—Å—Ç—É–ø.", newUserMenu());
      return;
    }
    awaitingTopic.add(ctx.from.id);
    await ctx.reply("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ç–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.");
  });

  bot.command("cancel", async (ctx) => {
    awaitingTopic.delete(ctx.from.id);
    pendingDrafts.delete(ctx.from.id);
    awaitingIntent.delete(ctx.from.id);
    await ctx.reply("–û—Ç–º–µ–Ω–µ–Ω–æ.", await isMember(ctx, CHANNEL_ID) ? memberMenu() : newUserMenu());
  });

  bot.on("message", async (ctx, next) => {
    try {
      // –ø—Ä–∏—á–∏–Ω–∞ (–∞–¥–º–∏–Ω-—á–∞—Ç)
      if (String(ctx.chat?.id) === String(ADMIN_CHAT_ID)) {
        const replyTo = ctx.message?.reply_to_message;
        if (replyTo) {
          const entry = pendingRejections.get(replyTo.message_id);
          if (entry) { await handleRejectionReason(ctx, entry, { ADMIN_CHAT_ID }); return; }
        }
        const planB = pendingRejectionsByAdmin.get(ctx.from.id);
        if (planB) { await handleRejectionReason(ctx, planB, { ADMIN_CHAT_ID }); return; }
      }

      const uid = ctx.from.id;

      // –Ω–∞—á–∞–ª–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
      if (awaitingTopic.has(uid)) {
        if (!(await isMember(ctx, CHANNEL_ID))) {
          awaitingTopic.delete(uid);
          await ctx.reply("‚ùå –í—ã –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ—Å—Ç—É–ø.", newUserMenu());
          return;
        }
        awaitingTopic.delete(uid);
        const meta = detectContentMeta(ctx.message);
        pendingDrafts.set(uid, {
          items: [{ srcChatId: ctx.chat.id, srcMsgId: ctx.message.message_id, ...meta }]
        });
        await ctx.reply(
          "–ü—Ä–∏–Ω—è—Ç–æ. –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–µ–∫—Å—Ç/–º–µ–¥–∏–∞/—Å—Ç–∏–∫–µ—Ä—ã.\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª.",
          composeKeyboard()
        );
        return;
      }

      // –¥–æ–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
      if (pendingDrafts.has(uid) && !awaitingIntent.has(uid)) {
        const meta = detectContentMeta(ctx.message);
        const session = pendingDrafts.get(uid);
        session.items.push({ srcChatId: ctx.chat.id, srcMsgId: ctx.message.message_id, ...meta });
        await ctx.reply("–î–æ–±–∞–≤–ª–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.", composeKeyboard());
        return;
      }

      // fallback 1/2 –ø–æ—Å–ª–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª
      if (pendingDrafts.has(uid) && awaitingIntent.has(uid) && "text" in ctx.message) {
        const t = (ctx.message.text || "").trim();
        if (t === "1" || t === "2") {
          const session = pendingDrafts.get(uid);
          const intent = t === "1" ? "advice" : "express";
          await submitDraftToModeration({ telegram: ctx.telegram, ADMIN_CHAT_ID }, { user: ctx.from, draft: session, intent });
          pendingDrafts.delete(uid);
          awaitingIntent.delete(uid);
          await ctx.reply("–¢–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.", memberMenu());
          return;
        } else {
          await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´1¬ª / ¬´2¬ª."); return;
        }
      }

      return next();
    } catch (e) {
      console.error("message handler error:", e);
      return next();
    }
  });

  // –æ–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–ì–æ—Ç–æ–≤–æ/–û—Ç–º–µ–Ω–∞¬ª ‚Äî –æ—Å—Ç–∞—ë—Ç—Å—è –∫–∞–∫ –±—ã–ª–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
}
