// bot/utils.js
import { pendingRejections, pendingRejectionsByAdmin, pendingSubmissions } from "./state.js";

export const isOldQueryError = (e) =>
  e?.description?.includes("query is too old") ||
  e?.description?.includes("query ID is invalid") ||
  e?.description?.includes("response timeout expired");

export async function isMember(ctx, channelId, userId) {
  try {
    const uid = userId ?? ctx.from?.id;
    const m = await ctx.telegram.getChatMember(channelId, uid);
    return ["member", "administrator", "creator"].includes(m.status);
  } catch { return false; }
}

export async function handleRejectionReason(ctx, entry, { ADMIN_CHAT_ID }) {
  if (!("text" in ctx.message)) {
    await ctx.reply("–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", {
      reply_to_message_id: ctx.message.message_id
    });
    return;
  }
  const { authorId, modMsgId, modText } = entry;
  const reason = ctx.message.text.trim();

  // –∞–≤—Ç–æ—Ä—É
  let sent = true;
  try { await ctx.telegram.sendMessage(authorId, `‚ùå –í–∞—à–∞ —Ç–µ–º–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`); }
  catch (e) { sent = false; await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –∞–≤—Ç–æ—Ä—É."); console.error(e); }

  // –ø–æ–º–µ—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
  try {
    await ctx.telegram.editMessageReplyMarkup(ADMIN_CHAT_ID, modMsgId, undefined, { inline_keyboard: [] });
    const updated = (modText || "üìù –¢–µ–º–∞") + `\n\nüö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`;
    await ctx.telegram.editMessageText(ADMIN_CHAT_ID, modMsgId, undefined, updated);
  } catch {
    await ctx.telegram.sendMessage(ADMIN_CHAT_ID, `üö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`, { reply_to_message_id: modMsgId });
  }

  // —á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  for (const [k, v] of pendingRejections.entries()) if (v.modMsgId === modMsgId) pendingRejections.delete(k);
  pendingRejectionsByAdmin.delete(ctx.from.id);
  pendingSubmissions.delete(modMsgId);

  await ctx.reply(`‚úÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.${sent ? "" : " (–ê–≤—Ç–æ—Ä—É –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ)"}`);
}
