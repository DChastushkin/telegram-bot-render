// bot/submit.js
import { pendingSubmissions } from "./state.js";

export const intentLabel = (intent) =>
  intent === "advice" ? "–Ω—É–∂–µ–Ω —Å–æ–≤–µ—Ç" : "—Ö–æ—á—É –≤—ã—Å–∫–∞–∑–∞—Ç—å—Å—è";

const ADVICE_HEADER  = "–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å";
const EXPRESS_HEADER = "–ù–æ–≤–∞—è —Ç–µ–º–∞ –æ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞";

// —Å–º–µ—Å—Ç–∏—Ç—å entities –Ω–∞ shift —Å–∏–º–≤–æ–ª–æ–≤
function shiftEntities(entities = [], shift = 0) {
  if (!Array.isArray(entities) || shift === 0) return entities;
  return entities.map(e => ({ ...e, offset: e.offset + shift }));
}

// —Å–∫–ª–µ–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º entities
function joinTextWithEntities(segments, sep = "\n\n") {
  const parts = [];
  const outEntities = [];
  let base = 0;
  for (let i = 0; i < segments.length; i++) {
    const t = segments[i].text || "";
    const ents = Array.isArray(segments[i].entities) ? segments[i].entities : [];
    if (t.length > 0) {
      parts.push(t);
      for (const e of ents) outEntities.push({ ...e, offset: e.offset + base });
      base += t.length;
      if (i !== segments.length - 1) base += sep.length;
    }
  }
  return { text: parts.join(sep), entities: outEntities };
}

/**
 * –ü—Ä–µ–≤—å—é –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ = —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –±—É–¥—É—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:
 * - –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Üí –û–î–ò–ù –ø–æ—Å—Ç (–º–µ–¥–∏–∞ + "—à–∞–ø–∫–∞\n\n—Ç–µ–∫—Å—Ç—ã")
 * - –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç + —Å—Ç–∏–∫–µ—Ä/–∫—Ä—É–∂–æ–∫ ‚Üí –î–í–ê –ø–æ—Å—Ç–∞ (1: "—à–∞–ø–∫–∞\n\n—Ç–µ–∫—Å—Ç—ã", 2: —Å—Ç–∏–∫–µ—Ä/–∫—Ä—É–∂–æ–∫)
 * - –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç ‚Üí –û–î–ò–ù –ø–æ—Å—Ç
 * - –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Å—Ç–∏–∫–µ—Ä/–∫—Ä—É–∂–æ–∫ ‚Üí –î–í–ê –ø–æ—Å—Ç–∞ (1: "—à–∞–ø–∫–∞", 2: –∫–æ–Ω—Ç–µ–Ω—Ç)
 */
export async function submitDraftToModeration({ telegram, ADMIN_CHAT_ID }, { user, draft, intent }) {
  const header = intent === "advice" ? ADVICE_HEADER : EXPRESS_HEADER;

  const info =
    `üë§ –û—Ç: @${user.username || "‚Äî"}\n` +
    `ID: ${user.id}\n` +
    `–ò–º—è: ${[user.first_name, user.last_name].filter(Boolean).join(" ") || "‚Äî"}\n` +
    `–¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: ${intentLabel(intent)}`;

  await telegram.sendMessage(ADMIN_CHAT_ID, info);

  const items = draft.items || [];

  // —Å–æ–±–µ—Ä—ë–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã (—Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –∫ –º–µ–¥–∏–∞)
  const textSegments = items
    .map(it => ({ text: it.text || "", entities: it.entities || [] }))
    .filter(s => s.text && s.text.trim().length > 0);

  // –ø–æ—Å–ª–µ–¥–Ω—è—è –º–µ–¥–∏–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–¥–ø–∏—Å–∏ ‚Äî primary
  let primary = null;
  for (let i = items.length - 1; i >= 0; i--) {
    if (items[i].supportsCaption) { primary = items[i]; break; }
  }

  // –º–µ–¥–∏–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏, –ù–û –Ω–µ —Ç–µ–∫—Å—Ç (—Ç.–µ. —Å—Ç–∏–∫–µ—Ä/–∫—Ä—É–∂–æ–∫ –∏ —Ç.–ø.)
  const nonCaptionMedia = items.filter(it => !it.supportsCaption && it.kind !== "text");
  const hasText = textSegments.length > 0;

  const adminPreviewMsgIds = [];

  if (primary) {
    const { text: body, entities } = joinTextWithEntities(textSegments);
    const caption = body ? `${header}\n\n${body}` : header;
    const caption_entities = shiftEntities(entities, body ? header.length + 2 : 0);

    const copied = await telegram.copyMessage(
      ADMIN_CHAT_ID,
      primary.srcChatId,
      primary.srcMsgId,
      { caption, caption_entities }
    );
    adminPreviewMsgIds.push(copied.message_id);

  } else if (hasText && nonCaptionMedia.length > 0) {
    // —Ç–µ–∫—Å—Ç + —Å—Ç–∏–∫–µ—Ä/–∫—Ä—É–∂–æ–∫ ‚Üí –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const { text: body, entities } = joinTextWithEntities(textSegments);
    const combined = `${header}\n\n${body}`;
    const finalEntities = shiftEntities(entities, header.length + 2);
    const msg1 = await telegram.sendMessage(ADMIN_CHAT_ID, combined, { entities: finalEntities });
    adminPreviewMsgIds.push(msg1.message_id);

    const msg2 = await telegram.copyMessage(
      ADMIN_CHAT_ID,
      nonCaptionMedia[0].srcChatId,
      nonCaptionMedia[0].srcMsgId
    );
    adminPreviewMsgIds.push(msg2.message_id);

  } else if (hasText) {
    // —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç ‚Üí –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const { text: body, entities } = joinTextWithEntities(textSegments);
    const combined = `${header}\n\n${body}`;
    const finalEntities = shiftEntities(entities, header.length + 2);
    const sent = await telegram.sendMessage(ADMIN_CHAT_ID, combined, { entities: finalEntities });
    adminPreviewMsgIds.push(sent.message_id);

  } else {
    // —Ç–æ–ª—å–∫–æ –±–µ–∑–ø–æ–¥–ø–∏—Å–Ω—ã–µ –º–µ–¥–∏–∞ ‚Üí –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—à–∞–ø–∫–∞ + –∫–æ–Ω—Ç–µ–Ω—Ç)
    const s1 = await telegram.sendMessage(ADMIN_CHAT_ID, header);
    adminPreviewMsgIds.push(s1.message_id);

    const first = nonCaptionMedia[0] || items[0];
    const s2 = await telegram.copyMessage(ADMIN_CHAT_ID, first.srcChatId, first.srcMsgId);
    adminPreviewMsgIds.push(s2.message_id);
  }

  // –∫–∞—Ä—Ç–æ—á–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
  const cb = (t) => JSON.stringify({ t, uid: user.id });
  const control = await telegram.sendMessage(
    ADMIN_CHAT_ID,
    "üìù –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—Å–º. —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ).",
    {
      reply_markup: {
        inline_keyboard: [[
          { text: "üì£ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data: cb("publish") },
          { text: "üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å",   callback_data: cb("reject")  }
        ]]
      }
    }
  );

  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
  pendingSubmissions.set(control.message_id, {
    authorId: user.id,
    intent,
    items,
    adminPreviewMsgIds
  });
}
