// index.js ‚Äî Render (webhook) + –ª–æ–∫–∞–ª—å–Ω–æ (polling), ESM ("type": "module" –≤ package.json)

import express from "express";
import { Telegraf, Markup } from "telegraf";

// ===== ENV =====
const {
  BOT_TOKEN,
  CHANNEL_ID,     // -100xxxxxxxxxx –∏–ª–∏ @username
  ADMIN_CHAT_ID,  // chat_id –∞–¥–º–∏–Ω-—á–∞—Ç–∞ –∏–ª–∏ –ª–∏—á–Ω—ã–π ID (—á–∏—Å–ª–æ/—Å—Ç—Ä–æ–∫–∞)
  APP_URL,        // https://<service>.onrender.com (Render -> Environment)
  PORT            // Render –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–∞–º
} = process.env;

if (!BOT_TOKEN || !CHANNEL_ID || !ADMIN_CHAT_ID) {
  console.error("‚ùå –ù—É–∂–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: BOT_TOKEN, CHANNEL_ID, ADMIN_CHAT_ID");
  process.exit(1);
}

// ===== INIT =====
const bot = new Telegraf(BOT_TOKEN);
const app = express();

// Healthcheck
app.get("/", (_, res) => res.send("OK ‚Äî bot is alive"));

// ===== UI =====
const mainMenu = () =>
  Markup.keyboard([["üîì –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª"], ["üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É/–≤–æ–ø—Ä–æ—Å"]]).resize();

// /start
bot.start(async (ctx) => {
  await ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞.\n\n‚Äî üîì –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª\n‚Äî üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É/–≤–æ–ø—Ä–æ—Å (–∞–Ω–æ–Ω–∏–º–Ω–æ —á–µ—Ä–µ–∑ –º–æ–¥–µ—Ä–∞—Ü–∏—é)",
    mainMenu()
  );
});

// ===== STATE =====
// 1) –∫—Ç–æ —Å–µ–π—á–∞—Å –ø–∏—à–µ—Ç —Ç–µ–º—É
const awaitingTopic = new Set();
// 2) –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: replyPromptMsgId -> { authorId, modMsgId, modText }
const pendingRejections = new Map();
// 3) —Å–≤—è–∑—å ¬´–∫–∞—Ä—Ç–æ—á–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏¬ª -> –æ—Ä–∏–≥–∏–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// controlMsgId -> { srcChatId, srcMsgId, authorId, adminCopyMsgId }
const pendingSubmissions = new Map();

// ===== ACCESS REQUEST (–∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –≤ –∫–∞–Ω–∞–ª) =====
bot.hears("üîì –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª", async (ctx) => {
  try {
    const link = await ctx.telegram.createChatInviteLink(CHANNEL_ID, {
      creates_join_request: true,
      name: `req_${ctx.from.id}_${Date.now()}`,
      expire_date: Math.floor(Date.now() / 1000) + 3600 // 1 —á–∞—Å
    });

    await ctx.reply(
      "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª:",
      Markup.inlineKeyboard([[Markup.button.url("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É ‚Üí", link.invite_link)]])
    );

    await ctx.telegram.sendMessage(
      ADMIN_CHAT_ID,
      `üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –æ—Ç @${ctx.from.username || ctx.from.id} (id: ${ctx.from.id}).`
    );
  } catch (e) {
    console.error("createChatInviteLink error:", e);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç ‚Äî –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞.");
  }
});

// ===== JOIN REQUESTS (–∫–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –∫–∞–Ω–∞–ª) =====
bot.on("chat_join_request", async (ctx) => {
  const req = ctx.update.chat_join_request;
  const user = req.from;

  const dataApprove = JSON.stringify({ t: "approve", cid: req.chat.id, uid: user.id });
  const dataDecline = JSON.stringify({ t: "decline", cid: req.chat.id, uid: user.id });

  await ctx.telegram.sendMessage(
    ADMIN_CHAT_ID,
    `üì© –ó–∞—è–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª –æ—Ç @${user.username || user.id} (id: ${user.id})`,
    {
      reply_markup: {
        inline_keyboard: [[
          { text: "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data: dataApprove },
          { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: dataDecline }
        ]]
      }
    }
  );
});

// ===== HELPERS =====
const isOldQueryError = (e) =>
  e?.description?.includes("query is too old") ||
  e?.description?.includes("query ID is invalid") ||
  e?.description?.includes("response timeout expired");

// ===== CALLBACKS =====
bot.on("callback_query", async (ctx) => {
  try {
    // –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ—Ç—É—Ö–∞–ª callback_query_id
    await ctx.answerCbQuery().catch(() => {});
    const payload = JSON.parse(ctx.update.callback_query.data || "{}");

    // --- –û–¥–æ–±—Ä–∏—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª ---
    if (payload.t === "approve") {
      await ctx.telegram.approveChatJoinRequest(payload.cid, payload.uid);
      await ctx.editMessageReplyMarkup(); // —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
      try { await ctx.telegram.sendMessage(payload.uid, "‚úÖ –í–∞–º –æ–¥–æ–±—Ä–µ–Ω –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª."); } catch {}
      return;
    }
    if (payload.t === "decline") {
      await ctx.telegram.declineChatJoinRequest(payload.cid, payload.uid);
      await ctx.editMessageReplyMarkup();
      try { await ctx.telegram.sendMessage(payload.uid, "‚ùå –î–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω."); } catch {}
      return;
    }

    // --- –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ–º—ã (–∫–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ---
    if (payload.t === "publish") {
      const controlMsg = ctx.update.callback_query.message; // –∫–∞—Ä—Ç–æ—á–∫–∞ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ
      const binding = pendingSubmissions.get(controlMsg.message_id);

      if (binding) {
        const { srcChatId, srcMsgId, authorId } = binding;
        await ctx.telegram.copyMessage(CHANNEL_ID, srcChatId, srcMsgId); // –ª—é–±–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        await ctx.editMessageReplyMarkup(); // —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
        try { await ctx.telegram.sendMessage(authorId, "‚úÖ –í–∞—à–∞ —Ç–µ–º–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞."); } catch {}
        pendingSubmissions.delete(controlMsg.message_id);
        return;
      }

      // fallback (–Ω–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫): –ø—É–±–ª–∏–∫—É–µ–º —Å–∞–º—É –∫–∞—Ä—Ç–æ—á–∫—É
      const adminMsg = ctx.update.callback_query.message;
      await ctx.telegram.copyMessage(CHANNEL_ID, ADMIN_CHAT_ID, adminMsg.message_id);
      await ctx.editMessageReplyMarkup();
      try { await ctx.telegram.sendMessage(payload.uid, "‚úÖ –í–∞—à–∞ —Ç–µ–º–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞."); } catch {}
      return;
    }

    // --- –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã (—Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–∏—á–∏–Ω—ã) ---
    if (payload.t === "reject") {
      const modMsg = ctx.update.callback_query.message; // –∫–∞—Ä—Ç–æ—á–∫–∞
      const prompt = await ctx.telegram.sendMessage(
        ADMIN_CHAT_ID,
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≠–¢–û —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç).",
        { reply_to_message_id: modMsg.message_id }
      );
      pendingRejections.set(prompt.message_id, {
        authorId: payload.uid,
        modMsgId: modMsg.message_id,
        modText: modMsg.text || ""
      });
      return;
    }

    // --- fallback ---
    await ctx.answerCbQuery("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ").catch(() => {});
  } catch (e) {
    if (!isOldQueryError(e)) {
      console.error("callback_query error:", e);
    }
    try { await ctx.answerCbQuery("–û—à–∏–±–∫–∞").catch(() => {}); } catch {}
  }
});

// ===== –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–º—É =====
bot.hears("üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É/–≤–æ–ø—Ä–æ—Å", async (ctx) => {
  awaitingTopic.add(ctx.from.id);
  await ctx.reply("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ç–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã).");
});

bot.command("cancel", async (ctx) => {
  awaitingTopic.delete(ctx.from.id);
  await ctx.reply("–û—Ç–º–µ–Ω–µ–Ω–æ.", mainMenu());
});

// ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π =====
// 1) –æ—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π (–≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ, reply –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫—É)
// 2) —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Ç–µ–º–∞ (–õ–Æ–ë–û–ô —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è)
bot.on("message", async (ctx, next) => {
  try {
    // --- 1) –û—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π ---
    if (String(ctx.chat?.id) === String(ADMIN_CHAT_ID)) {
      const replyTo = ctx.message?.reply_to_message;
      if (replyTo) {
        const key = replyTo.message_id;
        if (pendingRejections.has(key)) {
          if (!("text" in ctx.message)) {
            await ctx.reply("–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", {
              reply_to_message_id: replyTo.message_id
            });
            return;
          }
          const { authorId, modMsgId, modText } = pendingRejections.get(key);
          pendingRejections.delete(key);

          const reason = ctx.message.text.trim();

          // —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
          try {
            await ctx.telegram.sendMessage(
              authorId,
              `‚ùå –í–∞—à–∞ —Ç–µ–º–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`
            );
          } catch {}

          // —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
          try {
            await ctx.telegram.editMessageReplyMarkup(ADMIN_CHAT_ID, modMsgId, undefined, {
              inline_keyboard: []
            });
            const updatedText =
              (modText || "üìù –¢–µ–º–∞") + `\n\nüö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`;
            await ctx.telegram.editMessageText(
              ADMIN_CHAT_ID,
              modMsgId,
              undefined,
              updatedText
            );
          } catch (e) {
            console.error("edit reject card error:", e);
          }

          // —á–∏—Å—Ç–∏–º —Å–≤—è–∑—å ¬´–∫–∞—Ä—Ç–æ—á–∫–∞ -> –∏—Å—Ö–æ–¥–Ω–∏–∫¬ª, –µ—Å–ª–∏ –±—ã–ª–∞
          pendingSubmissions.delete(modMsgId);

          await ctx.reply("‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ—Ä—É. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.");
          return;
        }
      }
    }

    // --- 2) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ç–µ–º—É (–ª—é–±–æ–π —Ç–∏–ø) ---
    if (awaitingTopic.has(ctx.from.id)) {
      awaitingTopic.delete(ctx.from.id);

      const srcChatId = ctx.chat.id;
      const srcMsgId = ctx.message.message_id;

      // –∏–Ω—Ñ–æ –æ–± –∞–≤—Ç–æ—Ä–µ
      const userInfo =
        `üë§ –û—Ç: @${ctx.from.username || "‚Äî"}\n` +
        `ID: ${ctx.from.id}\n` +
        `–ò–º—è: ${[ctx.from.first_name, ctx.from.last_name].filter(Boolean).join(" ") || "‚Äî"}`;
      await ctx.telegram.sendMessage(ADMIN_CHAT_ID, userInfo);

      // –∫–æ–ø–∏—Ä—É–µ–º –û–†–ò–ì–ò–ù–ê–õ (–ª—é–±–æ–π —Ç–∏–ø) –≤ –∞–¥–º–∏–Ω-—á–∞—Ç,
      // —á—Ç–æ–±—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–µ–ª –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –ø–æ–π–¥—ë—Ç –≤ –∫–∞–Ω–∞–ª
      const copied = await ctx.telegram.copyMessage(ADMIN_CHAT_ID, srcChatId, srcMsgId);

      // –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ –∫–æ–ø–∏–µ–π
      const cbData = (t) => JSON.stringify({ t, uid: ctx.from.id });
      const control = await ctx.telegram.sendMessage(
        ADMIN_CHAT_ID,
        "üìù –ù–æ–≤–∞—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ç–µ–º–∞ (—Å–º. —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ).",
        {
          reply_markup: {
            inline_keyboard: [[
              { text: "üì£ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data: cbData("publish") },
              { text: "üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å",   callback_data: cbData("reject")  }
            ]]
          }
        }
      );

      // —Å–≤—è–∑—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–º
      pendingSubmissions.set(control.message_id, {
        srcChatId,
        srcMsgId,
        authorId: ctx.from.id,
        adminCopyMsgId: copied.message_id
      });

      await ctx.reply("–¢–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.");
      return;
    }

    // –Ω–µ –Ω–∞—à –∫–µ–π—Å ‚Äî –¥–∞–ª—å—à–µ –ø–æ —Ü–µ–ø–æ—á–∫–µ
    return next();
  } catch (e) {
    console.error("message handler error:", e);
    return next();
  }
});

// ===== STARTUP: webhook (prod) / polling (local) =====
const listenPort = Number(PORT) || 3000;
app.listen(listenPort, () => {
  console.log(`HTTP server listening on ${listenPort}`);
});

(async () => {
  try {
    if (APP_URL) {
      // PROD: WEBHOOK
      const secretPath = `/webhook/${BOT_TOKEN.slice(0, 10)}`;
      app.use(express.json());
      app.use(secretPath, bot.webhookCallback(secretPath));

      await bot.telegram.setWebhook(`${APP_URL}${secretPath}`, {
        drop_pending_updates: true
      });
      console.log("Webhook set to:", `${APP_URL}${secretPath}`);
    } else {
      // LOCAL: POLLING
      await bot.telegram.deleteWebhook({ drop_pending_updates: true });
      await bot.launch({ dropPendingUpdates: true });
      console.log("Bot launched in polling mode");
    }
  } catch (err) {
    console.error("Bot start error:", err);
  }
})();

// Graceful shutdown
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
