// index.js ‚Äî –≤–µ—Ä—Å–∏—è –¥–ª—è Render (webhook) + –ª–æ–∫–∞–ª—å–Ω–∞—è (polling)
// ESM: "type": "module" –≤ package.json

import express from "express";
import { Telegraf, Markup } from "telegraf";

// === ENV ===
// –ù–∞ Render –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—é—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–µ—Ä–≤–∏—Å–∞.
// –õ–æ–∫–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .env (—á–µ—Ä–µ–∑ `dotenv/config`), –Ω–æ —ç—Ç–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ.
// –ï—Å–ª–∏ —Ö–æ—á–µ—à—å .env –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –∏ –¥–æ–±–∞–≤—å –ø–∞–∫–µ—Ç dotenv.
// import 'dotenv/config';

const {
  BOT_TOKEN,
  CHANNEL_ID,     // –î–û–õ–ñ–ï–ù –±—ã—Ç—å –≤–∏–¥–∞ -100xxxxxxxxxx –∏–ª–∏ @username
  ADMIN_CHAT_ID,  // –≤–∞—à –ª–∏—á–Ω—ã–π chat id (—á–∏—Å–ª–æ)
  APP_URL,        // https://<service>.onrender.com  (–∑–∞–¥–∞—ë—Ç—Å—è –Ω–∞ Render)
  PORT            // Render –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
} = process.env;

if (!BOT_TOKEN || !CHANNEL_ID || !ADMIN_CHAT_ID) {
  console.error("‚ùå –ù—É–∂–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: BOT_TOKEN, CHANNEL_ID, ADMIN_CHAT_ID");
  process.exit(1);
}

// === BOT & WEB ===
const bot = new Telegraf(BOT_TOKEN);
const app = express();

// –ü—Ä–æ—Å—Ç–æ–π healthcheck
app.get("/", (_, res) => res.send("OK ‚Äî bot is alive"));

// === UI ===
const mainMenu = () =>
  Markup.keyboard([["üîì –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª"], ["üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É/–≤–æ–ø—Ä–æ—Å"]]).resize();

bot.start(async (ctx) => {
  await ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞.\n\n‚Äî üîì –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª\n‚Äî üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É/–≤–æ–ø—Ä–æ—Å (–∞–Ω–æ–Ω–∏–º–Ω–æ —á–µ—Ä–µ–∑ –º–æ–¥–µ—Ä–∞—Ü–∏—é)",
    mainMenu()
  );
});

// === STATE ===
const awaitingTopic = new Set();                           // –∫—Ç–æ —Å–µ–π—á–∞—Å –ø–∏—à–µ—Ç —Ç–µ–º—É
const pendingRejections = new Map(); // replyPromptMsgId -> { authorId, modMsgId, modText }

// === ACCESS REQUEST ===
bot.hears("üîì –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª", async (ctx) => {
  try {
    // –°–æ–∑–¥–∞—ë–º –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É —Å –∑–∞—è–≤–∫–æ–π –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–±–µ–∑ member_limit)
    const link = await ctx.telegram.createChatInviteLink(CHANNEL_ID, {
      creates_join_request: true,
      name: `req_${ctx.from.id}_${Date.now()}`,
      expire_date: Math.floor(Date.now() / 1000) + 3600
    });

    await ctx.reply(
      "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª:",
      Markup.inlineKeyboard([[Markup.button.url("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É ‚Üí", link.invite_link)]])
    );

    await ctx.telegram.sendMessage(
      ADMIN_CHAT_ID,
      `üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –æ—Ç @${ctx.from.username || ctx.from.id} (id: ${ctx.from.id}).`
    );
  } catch (e) {
    console.error("createChatInviteLink error:", e);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç ‚Äî –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞.");
  }
});

// === JOIN REQUESTS (–∫–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –∫–∞–Ω–∞–ª) ===
bot.on("chat_join_request", async (ctx) => {
  const req = ctx.update.chat_join_request;
  const user = req.from;

  const dataApprove = JSON.stringify({ t: "approve", cid: req.chat.id, uid: user.id });
  const dataDecline = JSON.stringify({ t: "decline", cid: req.chat.id, uid: user.id });

  await ctx.telegram.sendMessage(
    ADMIN_CHAT_ID,
    `üì© –ó–∞—è–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª –æ—Ç @${user.username || user.id} (id: ${user.id})`,
    {
      reply_markup: {
        inline_keyboard: [[
          { text: "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data: dataApprove },
          { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: dataDecline }
        ]]
      }
    }
  );
});

// === CALLBACKS ===
const isOldQueryError = (e) =>
  e?.description?.includes("query is too old") ||
  e?.description?.includes("query ID is invalid") ||
  e?.description?.includes("response timeout expired");

bot.on("callback_query", async (ctx) => {
  try {
    // –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ—Ç—É—Ö–∞–ª callback_query_id
    await ctx.answerCbQuery().catch(() => {});
    const payload = JSON.parse(ctx.update.callback_query.data || "{}");

    // –û–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –≤ –∫–∞–Ω–∞–ª
    if (payload.t === "approve") {
      await ctx.telegram.approveChatJoinRequest(payload.cid, payload.uid);
      await ctx.editMessageReplyMarkup(); // —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
      try { await ctx.telegram.sendMessage(payload.uid, "‚úÖ –í–∞–º –æ–¥–æ–±—Ä–µ–Ω –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª."); } catch {}
      return;
    }
    if (payload.t === "decline") {
      await ctx.telegram.declineChatJoinRequest(payload.cid, payload.uid);
      await ctx.editMessageReplyMarkup();
      try { await ctx.telegram.sendMessage(payload.uid, "‚ùå –î–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω."); } catch {}
      return;
    }

    // –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π —Ç–µ–º—ã
    if (payload.t === "publish") {
      const adminMsg = ctx.update.callback_query.message; // –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–µ–º—ã –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ
      await ctx.telegram.copyMessage(CHANNEL_ID, ADMIN_CHAT_ID, adminMsg.message_id);
      await ctx.editMessageReplyMarkup(); // —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
      try { await ctx.telegram.sendMessage(payload.uid, "‚úÖ –í–∞—à–∞ —Ç–µ–º–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞."); } catch {}
      return;
    }

    // –û–¢–ö–õ–û–ù–ï–ù–ò–ï –° –ü–†–ò–ß–ò–ù–û–ô
    if (payload.t === "reject") {
      const modMsg = ctx.update.callback_query.message; // –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–µ–º—ã (—Å –∫–Ω–æ–ø–∫–∞–º–∏)
      const prompt = await ctx.telegram.sendMessage(
        ADMIN_CHAT_ID,
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≠–¢–û —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç).",
        { reply_to_message_id: modMsg.message_id }
      );
      // —Å–æ—Ö—Ä–∞–Ω–∏–º, –∫ –∫–∞–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –æ—Ç–≤–µ—Ç
      pendingRejections.set(prompt.message_id, {
        authorId: payload.uid,
        modMsgId: modMsg.message_id,
        modText: modMsg.text || "" // —Å–æ—Ö—Ä–∞–Ω–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
      });
      return;
    }

    // fallback
    await ctx.answerCbQuery("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ").catch(() => {});
  } catch (e) {
    if (!isOldQueryError(e)) {
      console.error("callback_query error:", e);
    }
    try { await ctx.answerCbQuery("–û—à–∏–±–∫–∞").catch(() => {}); } catch {}
  }
});

// === –í–≤–æ–¥ —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ===
bot.hears("üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É/–≤–æ–ø—Ä–æ—Å", async (ctx) => {
  awaitingTopic.add(ctx.from.id);
  await ctx.reply("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ç–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã).");
});

bot.command("cancel", async (ctx) => {
  awaitingTopic.delete(ctx.from.id);
  await ctx.reply("–û—Ç–º–µ–Ω–µ–Ω–æ.", mainMenu());
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–≤–µ –≤–µ—Ç–∫–∏: 1) –æ—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∏—á–∏–Ω–æ–π, 2) —Ç–µ–∫—Å—Ç —Ç–µ–º—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ===
bot.on("message", async (ctx, next) => {
  try {
    // 1) –û—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ –∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫—É)
    if (String(ctx.chat?.id) === String(ADMIN_CHAT_ID)) {
      const replyTo = ctx.message?.reply_to_message;
      if (replyTo) {
        const key = replyTo.message_id;
        if (pendingRejections.has(key)) {
          if (!("text" in ctx.message)) {
            await ctx.reply("–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", {
              reply_to_message_id: replyTo.message_id
            });
            return;
          }
          const { authorId, modMsgId, modText } = pendingRejections.get(key);
          pendingRejections.delete(key);

          const reason = ctx.message.text.trim();

          // —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
          try {
            await ctx.telegram.sendMessage(
              authorId,
              `‚ùå –í–∞—à–∞ —Ç–µ–º–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`
            );
          } catch {}

          // —Å–Ω–∏–º–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø—Ä–∞–≤–∏–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
          try {
            await ctx.telegram.editMessageReplyMarkup(ADMIN_CHAT_ID, modMsgId, undefined, {
              inline_keyboard: []
            });
            const updatedText =
              (modText || "üìù –¢–µ–º–∞") + `\n\nüö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`;
            await ctx.telegram.editMessageText(
              ADMIN_CHAT_ID,
              modMsgId,
              undefined,
              updatedText
            );
          } catch (e) {
            console.error("edit reject card error:", e);
          }

          await ctx.reply("‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ—Ä—É. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.");
          return;
        }
      }
    }

    // 2) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç —Ç–µ–º—ã
    if (awaitingTopic.has(ctx.from.id) && "text" in ctx.message) {
      awaitingTopic.delete(ctx.from.id);
      const text = ctx.message.text;

      // –∫–æ—Ä–æ—Ç–∫–∏–µ callback_data: —Ç–æ–ª—å–∫–æ —Ç–∏–ø –∏ id –∞–≤—Ç–æ—Ä–∞
      const cbPublish = JSON.stringify({ t: "publish", uid: ctx.from.id });
      const cbReject  = JSON.stringify({ t: "reject",  uid: ctx.from.id });

      // —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ—Ä–∞ (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)
      const userInfo =
        `üë§ –û—Ç: @${ctx.from.username || "‚Äî"}\n` +
        `ID: ${ctx.from.id}\n` +
        `–ò–º—è: ${ctx.from.first_name || ""} ${ctx.from.last_name || ""}`.trim();
      await ctx.telegram.sendMessage(ADMIN_CHAT_ID, userInfo);

      // –∑–∞—Ç–µ–º ‚Äî —Å–∞–º —Ç–µ–∫—Å—Ç —Ç–µ–º—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
      const posted = await ctx.telegram.sendMessage(
        ADMIN_CHAT_ID,
        `üìù –ù–æ–≤–∞—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ç–µ–º–∞:\n\n${text}`,
        {
          reply_markup: {
            inline_keyboard: [[
              { text: "üì£ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data: cbPublish },
              { text: "üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å",   callback_data: cbReject }
            ]]
          }
        }
      );

      await ctx.reply("–¢–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.");
      return;
    }

    // –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞—à —Å–ª—É—á–∞–π ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
    return next();
  } catch (e) {
    console.error("message handler error:", e);
    return next();
  }
});

// === STARTUP: webhook –≤ –ø—Ä–æ–¥–µ, polling –ª–æ–∫–∞–ª—å–Ω–æ ===

// —Å–ª—É—à–∞–µ–º –ø–æ—Ä—Ç –í–°–ï–ì–î–ê, —á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª, —á—Ç–æ —Å–µ—Ä–≤–∏—Å ¬´–∂–∏–≤–æ–π¬ª
const listenPort = Number(PORT) || 3000;
app.listen(listenPort, () => {
  console.log(`HTTP server listening on ${listenPort}`);
});

(async () => {
  try {
    if (APP_URL) {
      // === PROD: WEBHOOK ===
      const secretPath = `/webhook/${BOT_TOKEN.slice(0, 10)}`;
      app.use(express.json());
      app.use(secretPath, bot.webhookCallback(secretPath));

      // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã –Ω–∞ –≤—Å—è–∫–∏–π
      await bot.telegram.setWebhook(`${APP_URL}${secretPath}`, {
        drop_pending_updates: true
      });
      console.log("Webhook set to:", `${APP_URL}${secretPath}`);
    } else {
      // === LOCAL: POLLING ===
      await bot.telegram.deleteWebhook({ drop_pending_updates: true });
      await bot.launch({ dropPendingUpdates: true });
      console.log("Bot launched in polling mode");
    }
  } catch (err) {
    console.error("Bot start error:", err);
  }
})();

// Graceful shutdown
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
