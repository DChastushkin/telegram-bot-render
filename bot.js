// bot.js ‚Äî –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞: –∞–¥–º–∏–Ω-—á–∞—Ç, —É–º–Ω–æ–µ –º–µ–Ω—é, –º–æ–¥–µ—Ä–∞—Ü–∏—è, –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ª—é–±—ã—Ö –º–µ–¥–∏–∞
import { Telegraf, Markup } from "telegraf";

export function createBot(env) {
  const { BOT_TOKEN, CHANNEL_ID, ADMIN_CHAT_ID } = env;
  const bot = new Telegraf(BOT_TOKEN);

  // ===== UI (–¥–≤–µ —Ä–∞–∑–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã) =====
  const newUserMenu = () =>
    Markup.keyboard([["üîì –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª"]]).resize();
  const memberMenu = () =>
    Markup.keyboard([["üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É/–≤–æ–ø—Ä–æ—Å"]]).resize();

  // ===== STATE =====
  const awaitingTopic = new Set();        // –∫—Ç–æ —Å–µ–π—á–∞—Å –ø–∏—à–µ—Ç —Ç–µ–º—É
  // replyMsgId -> { authorId, modMsgId, modText }
  const pendingRejections = new Map();
  // controlMsgId -> { srcChatId, srcMsgId, authorId, adminCopyMsgId }
  const pendingSubmissions = new Map();

  // ===== Helpers =====
  const isOldQueryError = (e) =>
    e?.description?.includes("query is too old") ||
    e?.description?.includes("query ID is invalid") ||
    e?.description?.includes("response timeout expired");

  async function isMember(ctx, userId) {
    try {
      const uid = userId ?? ctx.from?.id;
      const m = await ctx.telegram.getChatMember(CHANNEL_ID, uid);
      return ["member", "administrator", "creator"].includes(m.status);
    } catch {
      // –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å (–Ω–µ—Ç –ø—Ä–∞–≤ –≤ –∫–∞–Ω–∞–ª–µ) ‚Äî —Å—á–∏—Ç–∞–µ–º –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
      return false;
    }
  }

  async function showMenuByStatus(ctx) {
    const member = await isMember(ctx);
    if (member) {
      await ctx.reply("–í—ã —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞. –ú–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É.", memberMenu());
    } else {
      await ctx.reply("–ß—Ç–æ–±—ã –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–µ–º—ã, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª.", newUserMenu());
    }
  }

  // ===== –°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã =====
  // /id ‚Äî –≤–µ—Ä–Ω—ë—Ç chat.id (—É–¥–æ–±–Ω–æ, —á—Ç–æ–±—ã –≤—ã—Å—Ç–∞–≤–∏—Ç—å ADMIN_CHAT_ID)
  bot.command("id", async (ctx) => {
    await ctx.reply(`chat.id = ${ctx.chat.id}`);
  });

  // ===== /start =====
  bot.start(async (ctx) => {
    await ctx.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞.");
    await showMenuByStatus(ctx);
  });

  // ===== –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ =====
  bot.hears("üîì –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª", async (ctx) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å –∑–∞—Ä–∞–Ω–µ–µ
      const member = await ctx.telegram.getChatMember(CHANNEL_ID, ctx.from.id).catch(() => null);

      if (member?.status === "kicked") {
        await ctx.reply("‚ùå –í—ã –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö. –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã –≤–∞—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏.");
        // –∫–Ω–æ–ø–∫–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ ¬´–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å¬ª
        await ctx.telegram.sendMessage(
          ADMIN_CHAT_ID,
          `üõë –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${ctx.from.username || ctx.from.id} (id: ${ctx.from.id})`,
          {
            reply_markup: {
              inline_keyboard: [[
                { text: "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data: JSON.stringify({ t: "unban", uid: ctx.from.id }) }
              ]]
            }
          }
        );
        return;
      }

      if (["member", "administrator", "creator"].includes(member?.status)) {
        await ctx.reply("‚úÖ –í—ã —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞. –ú–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–µ–º—ã.", memberMenu());
        return;
      }

      // –°–æ–∑–¥–∞—ë–º –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É –±–µ–∑ —Å—Ä–æ–∫–∞ –∂–∏–∑–Ω–∏ (—Å–æ–∑–¥–∞—ë—Ç join request)
      const link = await ctx.telegram.createChatInviteLink(CHANNEL_ID, {
        creates_join_request: true,
        name: `req_${ctx.from.id}_${Date.now()}`
      });

      await ctx.reply(
        "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª:",
        Markup.inlineKeyboard([[Markup.button.url("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É ‚Üí", link.invite_link)]])
      );

      await ctx.telegram.sendMessage(
        ADMIN_CHAT_ID,
        `üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –æ—Ç @${ctx.from.username || ctx.from.id} (id: ${ctx.from.id}).`
      );
    } catch (e) {
      console.error("createChatInviteLink error:", e);
      await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç ‚Äî –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞.");
    }
  });

  // ===== –í—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª (—Å–æ–±—ã—Ç–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞) =====
  bot.on("chat_join_request", async (ctx) => {
    const req = ctx.update.chat_join_request;
    const user = req.from;

    const dataApprove = JSON.stringify({ t: "approve", cid: req.chat.id, uid: user.id });
    const dataDecline = JSON.stringify({ t: "decline", cid: req.chat.id, uid: user.id });

    await ctx.telegram.sendMessage(
      ADMIN_CHAT_ID,
      `üì© –ó–∞—è–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª –æ—Ç @${user.username || user.id} (id: ${user.id})`,
      {
        reply_markup: {
          inline_keyboard: [[
            { text: "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data: dataApprove },
            { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: dataDecline }
          ]]
        }
      }
    );
  });

  // ===== –ö–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –∏–∑ –∞–¥–º–∏–Ω-—á–∞—Ç–∞!) =====
  bot.on("callback_query", async (ctx) => {
    try {
      await ctx.answerCbQuery().catch(() => {});
      // –∑–∞—â–∏—Ç–∞: –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–ª–∏–∫–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –∞–¥–º–∏–Ω-—á–∞—Ç–∞
      if (String(ctx.chat?.id) !== String(ADMIN_CHAT_ID)) {
        await ctx.answerCbQuery("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞");
        return;
      }

      const payload = JSON.parse(ctx.update.callback_query.data || "{}");

      // --- Unban (—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ---
      if (payload.t === "unban") {
        try {
          await ctx.telegram.unbanChatMember(CHANNEL_ID, payload.uid);
          await ctx.editMessageReplyMarkup(); // —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É
          try {
            await ctx.telegram.sendMessage(payload.uid, "‚úÖ –í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª –µ—â—ë —Ä–∞–∑.");
          } catch {}
        } catch (e) {
          console.error("unban error:", e);
        }
        return;
      }

      // --- –û–¥–æ–±—Ä–∏—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª ---
      if (payload.t === "approve") {
        await ctx.telegram.approveChatJoinRequest(payload.cid, payload.uid);
        await ctx.editMessageReplyMarkup();
        try {
          await ctx.telegram.sendMessage(payload.uid, "‚úÖ –í–∞–º –æ–¥–æ–±—Ä–µ–Ω –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª.");
          // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞
          await ctx.telegram.sendMessage(
            payload.uid,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É.",
            { reply_markup: memberMenu().reply_markup }
          );
        } catch {}
        return;
      }
      if (payload.t === "decline") {
        await ctx.telegram.declineChatJoinRequest(payload.cid, payload.uid);
        await ctx.editMessageReplyMarkup();
        try { await ctx.telegram.sendMessage(payload.uid, "‚ùå –î–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω."); } catch {}
        return;
      }

      // --- –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ–º—ã (–∫–æ–ø–∏—Ä—É–µ–º –û–†–ò–ì–ò–ù–ê–õ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª) ---
      if (payload.t === "publish") {
        const controlMsg = ctx.update.callback_query.message;
        const binding = pendingSubmissions.get(controlMsg.message_id);

        if (binding) {
          const { srcChatId, srcMsgId, authorId } = binding;
          await ctx.telegram.copyMessage(CHANNEL_ID, srcChatId, srcMsgId);
          await ctx.editMessageReplyMarkup(); // —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
          try { await ctx.telegram.sendMessage(authorId, "‚úÖ –í–∞—à–∞ —Ç–µ–º–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞."); } catch {}
          pendingSubmissions.delete(controlMsg.message_id);
          return;
        }

        // fallback: –Ω–∞ —Å–ª—É—á–∞–π –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        const adminMsg = ctx.update.callback_query.message;
        await ctx.telegram.copyMessage(CHANNEL_ID, ADMIN_CHAT_ID, adminMsg.message_id);
        await ctx.editMessageReplyMarkup();
        try { await ctx.telegram.sendMessage(payload.uid, "‚úÖ –í–∞—à–∞ —Ç–µ–º–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞."); } catch {}
        return;
      }

      // --- –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã —Å –ø—Ä–∏—á–∏–Ω–æ–π (—É—Å—Ç–æ–π—á–∏–≤—ã–µ –æ—Ç–≤–µ—Ç—ã) ---
      if (payload.t === "reject") {
        const controlMsg = ctx.update.callback_query.message; // –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏

        // –ü–æ–¥—Å–∫–∞–∑–∫–∞ ¬´–Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É¬ª —Å reply –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
        const prompt = await ctx.telegram.sendMessage(
          ADMIN_CHAT_ID,
          "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≠–¢–û —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç).",
          { reply_to_message_id: controlMsg.message_id }
        );

        // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        const entry = {
          authorId: payload.uid,
          modMsgId: controlMsg.message_id,
          modText: controlMsg.text || ""
        };

        // –ü—Ä–∏–º–µ–º –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞:
        // 1) –ø–æ–¥—Å–∫–∞–∑–∫—É,
        pendingRejections.set(prompt.message_id, entry);
        // 2) –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏,
        pendingRejections.set(controlMsg.message_id, entry);
        // 3) —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ä–∏–≥–∏–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∫–∞)
        const binding = pendingSubmissions.get(controlMsg.message_id);
        if (binding?.adminCopyMsgId) {
          pendingRejections.set(binding.adminCopyMsgId, entry);
        }

        return;
      }

      await ctx.answerCbQuery("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ").catch(() => {});
    } catch (e) {
      if (!isOldQueryError(e)) console.error("callback_query error:", e);
      try { await ctx.answerCbQuery("–û—à–∏–±–∫–∞").catch(() => {}); } catch {}
    }
  });

  // ===== –ö–Ω–æ–ø–∫–∞ ¬´–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É¬ª (—Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞) =====
  bot.hears("üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É/–≤–æ–ø—Ä–æ—Å", async (ctx) => {
    const member = await isMember(ctx);
    if (!member) {
      await ctx.reply("‚ùå –í—ã –µ—â—ë –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ—Å—Ç—É–ø.", newUserMenu());
      return;
    }
    awaitingTopic.add(ctx.from.id);
    await ctx.reply("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ç–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã).");
  });

  bot.command("cancel", async (ctx) => {
    awaitingTopic.delete(ctx.from.id);
    await showMenuByStatus(ctx);
  });

  // ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π =====
  // 1) –æ—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π (reply –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ)
  // 2) —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Ç–µ–º–∞ (–õ–Æ–ë–û–ô —Ç–∏–ø; —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
  bot.on("message", async (ctx, next) => {
    try {
      // --- 1) –û—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π ---
      if (String(ctx.chat?.id) === String(ADMIN_CHAT_ID)) {
        const replyTo = ctx.message?.reply_to_message;
        if (replyTo) {
          const key = replyTo.message_id;
          const entry = pendingRejections.get(key);
          if (entry) {
            if (!("text" in ctx.message)) {
              await ctx.reply("–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", {
                reply_to_message_id: replyTo.message_id
              });
              return;
            }

            const { authorId, modMsgId, modText } = entry;
            const reason = ctx.message.text.trim();

            // 1) —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
            let sentToAuthor = true;
            try {
              await ctx.telegram.sendMessage(
                authorId,
                `‚ùå –í–∞—à–∞ —Ç–µ–º–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`
              );
            } catch (e) {
              sentToAuthor = false;
              await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –∞–≤—Ç–æ—Ä—É (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫—Ä—ã—Ç—ã –õ–° –±–æ—Ç—É).");
            }

            // 2) —Å–Ω–∏–º–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            try {
              await ctx.telegram.editMessageReplyMarkup(ADMIN_CHAT_ID, modMsgId, undefined, { inline_keyboard: [] });
              const updatedText = (modText || "üìù –¢–µ–º–∞") + `\n\nüö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`;
              await ctx.telegram.editMessageText(ADMIN_CHAT_ID, modMsgId, undefined, updatedText);
            } catch {
              // –µ—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –±—ã–ª–∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π ‚Äî –¥–æ–±–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
              await ctx.telegram.sendMessage(ADMIN_CHAT_ID, `üö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`, {
                reply_to_message_id: modMsgId
              });
            }

            // 3) –ø–æ–¥—á–∏—Å—Ç–∏–º –≤—Å–µ –∫–ª—é—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π
            for (const [k, v] of pendingRejections.entries()) {
              if (v.modMsgId === modMsgId) pendingRejections.delete(k);
            }
            pendingSubmissions.delete(modMsgId);

            await ctx.reply(`‚úÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.${sentToAuthor ? "" : " (–ê–≤—Ç–æ—Ä—É –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ)"}`);
            return;
          }
        }
      }

      // --- 2) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–º—É (–ª—é–±–æ–π —Ç–∏–ø), –µ—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ ---
      if (awaitingTopic.has(ctx.from.id)) {
        // –¥–æ–ø. –∑–∞—â–∏—Ç–∞: –ø—Ä–æ–≤–µ—Ä–∏–º —á–ª–µ–Ω—Å—Ç–≤–æ –µ—â—ë —Ä–∞–∑
        const member = await isMember(ctx);
        if (!member) {
          awaitingTopic.delete(ctx.from.id);
          await ctx.reply("‚ùå –í—ã –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ—Å—Ç—É–ø.", newUserMenu());
          return;
        }

        awaitingTopic.delete(ctx.from.id);

        const srcChatId = ctx.chat.id;
        const srcMsgId = ctx.message.message_id;

        // –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ (–≤ –∞–¥–º–∏–Ω-—á–∞—Ç)
        const userInfo =
          `üë§ –û—Ç: @${ctx.from.username || "‚Äî"}\n` +
          `ID: ${ctx.from.id}\n` +
          `–ò–º—è: ${[ctx.from.first_name, ctx.from.last_name].filter(Boolean).join(" ") || "‚Äî"}`;
        await ctx.telegram.sendMessage(ADMIN_CHAT_ID, userInfo);

        // –∫–æ–ø–∏—Ä—É–µ–º –û–†–ò–ì–ò–ù–ê–õ (–ª—é–±–æ–π —Ç–∏–ø) –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
        const copied = await ctx.telegram.copyMessage(ADMIN_CHAT_ID, srcChatId, srcMsgId);

        // –∫–∞—Ä—Ç–æ—á–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–ª—é–±–æ–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞–∂–∞—Ç—å)
        const cbData = (t) => JSON.stringify({ t, uid: ctx.from.id });
        const control = await ctx.telegram.sendMessage(
          ADMIN_CHAT_ID,
          "üìù –ù–æ–≤–∞—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ç–µ–º–∞ (—Å–º. —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ).",
          {
            reply_markup: {
              inline_keyboard: [[
                { text: "üì£ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data: cbData("publish") },
                { text: "üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å",   callback_data: cbData("reject")  }
              ]]
            }
          }
        );

        // —Å–≤—è–∑—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–º
        pendingSubmissions.set(control.message_id, {
          srcChatId,
          srcMsgId,
          authorId: ctx.from.id,
          adminCopyMsgId: copied.message_id
        });

        await ctx.reply("–¢–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.", memberMenu());
        return;
      }

      // –Ω–µ –Ω–∞—à –∫–µ–π—Å ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –¥–∞–ª—å—à–µ
      return next();
    } catch (e) {
      console.error("message handler error:", e);
      return next();
    }
  });

  return bot;
}
